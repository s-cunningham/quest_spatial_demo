---
title: "GIS Basics in ArcGIS Pro and R"
author: "Stephanie Cunningham"
format: html
editor: visual
---

### Using R as GIS

I want to preface this by pointing out that R is not a GIS. It can handle spatial data, but there are some things that are just not as efficient as using an actual GIS, like ArcGIS Pro or QGIS.

### Packages for handing spatial data in R

There are many packages that will allow you to handle and manipulate spatial data in R. Several of these are only a few years old, and have superseded previous packages.

-   `terra` : Supersedes the `raster` package and is much faster. Also allows manipulation of vector data.
-   `sf` : Package for working with 'simple features'.
-   `stars` : another option for handing raster data
-   These are the heavy-hitters in my opinion, but there are several other packages that do complementary things.

This demo will use the `terra` package. We will also use the `tidyterra` and `ggspatial` packages to leverage `ggplot2`'s elegant plotting. We will also make use of the `exactextractr` package to extend some of the `terra`'s main functions.

### Types of spatial data

Vector

Raster

### How this guide is organized

Demonstrate workflow in ArcGIS

Demonstrate the same workflow in R

*Note:* Material for this guide was liberally borrowed from Labs 2 and 3 of Jacqui Frair's Landscape Ecology course (EFB650) at SUNY College of Environmental Science and Forestry, which was based on materials developed by Charlene Nielsen and Evelyn Merrill at the University of Alberta.

### Objectives

1.  Import vector (points, lines, polygons) and raster data, visualize
2.  Check spatial reference and reproject
3.  

## Using ArcGIS Pro (v. 3.3.0)

The new

![](images/Screenshot 2025-03-17 121349-01.png)

### 1. Importing data

Probably my favorite thing about the forced transition from ArcMap to ArcGIS Pro is that it is no longer necessary to set folder connections before importing data (though it is still possible to do that, and might be preferred if you have a lot of different spatial layers that you will be importing from the same folder).

![The 'Add Data' Button (circled in orange) can be found in the Map menu](images/Screenshot%202025-03-10%20140217.png)

### Check Spatial Reference

Right click on each layer in the table of contents. Go to the bottom of the menu and click on Properties. In the properties menu, click on **Source** on the left, and then expand the **Spatial Reference** menu. Do this for all three layers.

![](images/Screenshot 2025-03-17 143818.png)

It appears that one of the layers does not have the same projection as the other two. While they look fine (ArcGIS shown them as if they all have the same spatial reference), we might run into problems if we start doing analyses on layers that have different coordinate systems. We will reproject the \[ECL\] layer to match the other two.

Under the Analysis tab along the top ribbon, click on Tools (the red toolbox icon). It should open the Geoprocessing pane on the right side of your map. Click on the Toolboxes tab, then go to Data Management Tools \> Projections and Transformations \> Project.

![](images/Screenshot 2025-03-17 144303.png)

Alternatively, you can use the search bar and type in 'project'. It should show you the name of the project tool, as well as the location. Make sure to select the one named "Project' and not 'Project Raster' (but note that they are both within Data Management Tools.

![](images/Screenshot 2025-03-17 144538.png)

### Symbology

![](images/Screenshot 2025-03-17 143428.png)

Creating buffer

### Creating a nice-looking map

## Using R (v. 4.4.2)

klj;asdkfj

Note that we create a lot of files when we went through this in ArcGIS, but we don't have to do this in R (but you could if you wanted to...I just skipped a lot of these).

```{r}
#| eval: false
library(terra)

# Terra makes it easy to read in a shapefile with the vect() function
adk <- vect("data/.shp")

```

Now let's read in a raster

```{r}
#| eval: false

# Read in a raster using the rast() function
r1 <- rast("data/.tif")

# Plot it quickly to get an idea of what we're working with
plot(r1)

# Check the coordinate reference system (projection)
crs(r1)




```

Sometimes we need to reproject rasters, even though this can result in this getting a little wonky (warping squares and all that). The `terra` package feels better about reprojecting rasters when it has another raster it can match the first one to. That is, we're probably going to need to do at least a bit of resampling, so `terra` would rather have a template when it does that.

```{r}
#| eval: false
# read in a new raster (different projection)
r2 <- rast("data/.tif")

# plot it
plot(r2)

# Reproject r1 to match the projection of r1
r1 <- project(r1, r2)

```

We can also combine multiple rasters into a "stack" , which is what it was known as in the `raster` package, if we want to do the same thing to multiple rasters. We can do the same thing in `terra` but don't explicitly call it a "stack" like we did in `raster`.

```{r}
#| eval: false
# Instead, we just use the c() function
rast_list <- c()
layers <- rast(rast_list)
```
