---
title: "GIS Basics in ArcGIS Pro and R"
format: 
  html:
    toc: true
editor: visual
---

### How this guide is organized

1.  There are 2 sections: vector-based and raster-based.
2.  Demonstrate workflow in ArcGIS
3.  Demonstrate the same workflow in R

*Note:* Material for this guide was liberally borrowed from Labs 2 and 3 of Jacqui Frair's Landscape Ecology course (EFB650) at SUNY College of Environmental Science and Forestry, which was based on materials developed by Charlene Nielsen and Evelyn Merrill at the University of Alberta.

# Using ArcGIS Pro (v. 3.3.0)

The new ArcGIS Pro is a little different in that it creates 'projects' instead of individual map document. Click on the Map icon to create a new map project.

![](images/Screenshot%202025-03-17%20121349-01.png)

It's always a good idea to save often. ArcMap used to crash at the slightest offense, not quite sure if ArcGIS Pro will do the same.

## Part I: Vector Data

### 1. Importing data

It is no longer necessary to set folder connections before importing data (though it is still possible to do that, and might be preferred if you have a lot of different spatial layers that you will be importing from or exporting to the same folder).

![The 'Add Data' Button (circled in orange) can be found in the Map menu](images/Screenshot%202025-03-10%20140217.png)

### 2. Check Spatial Reference

Right click on each layer in the table of contents. Go to the bottom of the menu and click on Properties. In the properties menu, click on Source on the left, and then expand the **Spatial Reference** menu. Do this for all three layers.

![](images/Screenshot%202025-03-17%20143818.png)

It appears that one of the layers does not have the same projection as the other two. While they look fine (ArcGIS shown them as if they all have the same spatial reference), we might run into problems if we start doing analyses on layers that have different coordinate systems. We will reproject the \[ELC\] layer to match the other two.

Under the Analysis tab along the top ribbon, click on Tools (the red toolbox icon). It should open the Geoprocessing pane on the right side of your map. Click on the Toolboxes tab, then go to Data Management Tools \> Projections and Transformations \> Project.

![](images/Screenshot%202025-03-17%20144303.png)

Alternatively, you can use the search bar and type in 'project'. It should show you the name of the project tool, as well as the location. Make sure to select the one named "Project' and not 'Project Raster' (but note that they are both within Data Management Tools).

![](images/Screenshot%202025-03-17%20144538.png)

When you click on the project tool, you can use the dropdown menu to select the layer you want to reproject, or click on the folder icon to read in a layer to reproject. By default, ArcGIS Pro will save your projected layer in the project geodatabase, but you can again click on the folder icon to specify where you would like to save.

Then, you will need to provide the coordinate system you want the new layer to have. If you click on the arrow in the box, it will let you select from layers already in the map. You can also click on the globe icon and it will provide more options. Since we want to match \[ELC\] to the other layers, select the one that matches what you found in the spatial reference for \[TRAILS\] or \[CAMP\].

![](images/Screenshot%202025-03-17%20161001.png)

### 3. Symbology

Now we want to change the way the layers are displayed. There is probably only a single color for all of the different polygon sections. Click on that box (under the layer in the table of contents). The Color scheme drop-down menu will allow you to select a color palette. Alternatively, you can change individual colors by clicking on the color in the Symbol column of the Symbology menu.

![](images/Screenshot%202025-03-17%20143428.png)

### 4. Attributes

In order to view the information stored within the polygons, we need to open the Attribute Table. Right click on the layer name and select Attribute Table, or hit CTRL+T.

![](images/Screenshot%202025-03-18%20131151-01.png)

### 5. Spatial Analysis

We will do a quick analysis to calculate how much area will be

![Note that 'Pairwise Buffer' is the newer version of 'Buffer'](images/Screenshot%202025-03-18%20122627-01.png)

Now, we want to put a buffer around the campsites, but we will need to adjust the buffer size based on campsite size. Larger campsites with greater capacity will take up more space and be more disruptive than smaller campsites with lower capacities. Therefore, we need to add a column to the attribute table that specifies the buffer size we want for our buffer. Open the attribute table for \[CAMP\] again. In the top left corner, there will be a button next to **Field:**. Click that.

![](images/Screenshot%202025-03-18%20131813.png)

asdf

We can add an empty column to the attribute table.

![Note that the save button is all the way at the top](images/Screenshot%202025-03-18%20132147.png)

After we click save, we still have an empty column. We are going to use a threshold of 10 campers to determine whether each size gets a 100 m or 200 m buffer. That is, anything less than or equal to 10 will have a buffer size of 100, and anything larger will have a buffer size of 200. We can select by Attribute to highlight campsites with capacity less than or equal to 10.

![Select by attributes](images/Screenshot%202025-03-18%20131316.png)

Returning to the Attribute Table, right click on the new BUFFER column and click on Calculate Field.

![](images/Screenshot%202025-03-18%20132318.png)

After entering 100, hit OK. Then, in the same menu bar where you added the field, click Switch.

![](images/Screenshot%202025-03-18%20132355.png)

This will remove the selection from camps with capacity \<=10, and highlight camps with capacity \> 10. Now we can open Calculate Field again, and this time enter BUFFER = 200. Click OK. Should look like this:

![](images/Screenshot%202025-03-18%20132405.png)

Now you can close the attribute table and go to the Geoprocessing toolbox. Open Pairwise Buffer again.

![](images/Screenshot%202025-03-18%20132618-01.png)

Make sure Case Field is blank! It seems to autofill.

Note that we have to recalculate the area after clipping...otherwise it retains the area of the full polygon.

![Wolverine area disturbed (in sq km)](images/Screenshot%202025-03-19%20120701.png)

## Part II: Raster Data

### 1. Importing Data

Let's create a new map in ArcGIS Pro. The projects allow you to have multiple map documents with their own collection of layers that you can select between without closing the project. Along the top, go to Insert and Select New Map (you can click on the map icon, or if you click the words with the arrow, you can select a new map vs other options).

![](images/Screenshot%202025-03-18%20101446.png)

You will now have two map tabs, probably named "Map" and "Map1". You can rename them by opening the Properties menu for the map in the Contents Pane.

![](images/Screenshot%202025-03-18%20101823.png)

For this section, we want to read in three layers again:

-   elc.shp
-   dem.tif
-   rivers.shp

Make sure to check spatial references and reproject the \[ELC\] layer again!

### 2. Symbology

Uncheck ELC temporarily. Let's look at the default symbology for the rivers shapefile and DEM raster.

![Yikes](images/Screenshot%202025-03-18%20102356.png)

Let's change that elevation to a terrain palette. Go to the Symbology tab and click on box for Color scheme. Scroll down a bit until you find the elevation palettes (if you hover your cursor over the palette, it the name will appear). Click on the new palette.

![Better...ish](images/Screenshot%202025-03-18%20104523.png)

![](images/Screenshot%202025-03-18%20131151.png)

### 3. Raster-based Analysis

### 4. Surface Analysis

Digital elevation models are often used in analysis. Sometimes it is more useful to visualize as a hillshade, or the shaded relief, or other aspects of the terrain. There is a separate set of tools called Raster Functions, which can be found along the top of the Analysis tab. Navigate to Analysis Tab \> Raster Functions \> Surface \> Hillshade.

![](images/Screenshot%202025-03-20%20110756.png)

The Hillshade tool will open.

### 5. Create a Final Map

# Using R (v. 4.4.2)

## Using R as GIS

I want to preface this by pointing out that R is not a GIS. It can handle spatial data, but there are some things that are just not as efficient as using an actual GIS, like ArcGIS Pro or QGIS.

### Packages for handing spatial data in R

There are many packages that will allow you to handle and manipulate spatial data in R. Several of these are only a few years old, and have superseded previous packages.

-   `terra` : Supersedes the `raster` package and is much faster. Also allows manipulation of vector data.
-   `sf` : Package for working with 'simple features'.
-   `stars` : another option for handing raster data
-   These are the heavy-hitters in my opinion, but there are several other packages that do complementary things.

This demo will use the `terra` package (v. 1.7-83). We will also use the `tidyterra` (v. 0.6.1) and `ggspatial` (v. 1.1.9) packages to leverage `ggplot2`'s elegant plotting (v. 3.5.1), with a little bit of help from `ggnewscale` (v. 0.5.0).

## Part I: Vector Data

The packages we need for this section are:

```{r}
#| eval: false
library(terra)
library(ggplot2)
library(tidyterra)
```

### 1. Importing data

Note that we create a lot of files when we went through this in ArcGIS, but we don't have to do this in R (but you could if you wanted to...I just skipped a lot of these).

```{r}
#| eval: false

# Terra makes it easy to read in shapefiles with the vect() function

# Ecological Land Classification (i.e., ecoregions) 
elc <- vect("efb650_data/elc.shp")
# Trails in the Clearwater River Watershed 
trails <- vect("efb650_data/trails.shp")
# Camp sites in the Clearwater River Watershed 
camp <- vect("efb650_data/camp.shp")
```

### 2. Check Spatial Reference

We can use the `crs` function (which stands for 'coordinate reference system') to check the spatial reference of each shapefile.

```{r}
#| eval: false
## Check the spatial reference
elc
crs(elc)

camp
crs(camp)

trails
crs(trails)

## Does the CRS match up between layers?
crs(elc)==crs(camp)
crs(elc)==crs(trails) 
crs(camp)==crs(trails) # Looks like elc is the problem. 
```

Sometimes we need to reproject rasters, even though this can result in this getting a little wonky (warping squares and all that). The `terra` package feels better about reprojecting rasters when it has another raster it can match the first one to.

For vectors, we just need to provide a CRS. We can match it to a specific object like in ArcGIS.

```{r}
#| eval: false
# Reproject elc to camp CRS
elc <- project(elc, crs(camp))
# Check it
crs(elc)==crs(camp)

## You can also provide an EPSG code if you are projecting to a specific CRS
# For example:
elc_latlon <- project(elc, "EPSG:4326")
```

### 3. Plotting Spatial Objects with `ggplot2`

We can create high-quality plots with the `ggplot2` package, and `tidyterra` helps handle the spatial objects correctly.

```{r}
#| eval: false
# Set up a color palette so that we don't have to copy it into our code so many times
pal <- c("#F7FCF0","#E0F3DB","#CCEBC5","#A8DDB5","#7BCCC4","gray","#4EB3D3","#2B8CBE","#0868AC","#084081")

## First plot
ggplot() +
  geom_spatvector(data=elc) +
  geom_spatvector(data=trails) +
  geom_spatvector(data=camp) 
# doesn't look like much at this point

## We can control the colors and size/width of points and lines
ggplot() +
  geom_spatvector(data=elc, aes(fill=DOMVEG)) +
  scale_fill_manual(values=pal) +
  geom_spatvector(data=trails, color="darkred", linewidth=1) +
  geom_spatvector(data=camp, shape=21, size=3, fill="white") +
  theme_void() 
```

### 4. Attributes

We can view the 'attribute table' in R, which can also be converted to a data frame. The `values()` function will allow us to view the table.

```{r}
#| eval: false
# Check [CAMP]
values(camp)

# Check [ELC]
values(elc)

# Check [TRAILS]
values(trails)
```

### 5. Spatial Analysis

If we are planning on building this trail system and campsites, we might want to assess how the disturbance will impact wildlife. First, we want to add a 50 km buffer around the trails.

```{r}
#| eval: false
# Create a 50 m buffer around the trails
tr_buff <- buffer(trails, width=50, capstyle="round", joinstyle="round")

# Plot to see what it did. We can use base R plotting for a quick look.
plot(tr_buff)

# It looks like each trail section received its own buffer, but we just want one continuous buffer. 
tr_buff <- aggregate(tr_buff, dissolve=TRUE)
```

Now, we want to put a buffer around the campsites, but we will need to adjust the buffer size based on campsite size. Larger campsites with greater capacity will take up more space and be more disruptive than smaller campsites with lower capacities, so we want a 200 m buffer around high-capacity campsites, and a 100 m buffer around smaller campsites. We need to add a column to the SpatVector that specifies the buffer size we want for our buffer. We can use an if/else statement to assign buffer size based on campground capacity. This can be done the same way we would add this column to a data frame.

```{r}
#| eval: false
# Add a column to the [CAMP] SpatVector
camp$buff_size <- ifelse(camp$CAPACITY <= 10, 100, 200)
values(camp) # Check it worked

# Create the buffer
ca_buff <- buffer(camp, width=camp$buff_size)
plot(ca_buff) # check it worked
```

Now we just need to combine the trail and campsite buffers into one single polygon.

```{r}
#| eval: false
# Combine all of the buffers into a single layer
buffunion <- union(tr_buff, ca_buff)

# Again we need to aggregate and dissolve our buffers
buffunion <- aggregate(buffunion, dissolve=TRUE)

# Plot to check
plot(buffunion)
```

After we have the buffer, we want to calculate areas.

```{r}
#| eval: false
# How much area is potentially disturbed by the trails and campsites?
disturbed_m <- expanse(buffunion)

# Not that the previous value was returned in square meters. Square kilometers will likely be more useful.
disturbed_km <- disturbed_m / 1000 / 1000
disturbed_km # print area to console
```

Now let's look at the disturbances through the eyes of a particular species, the wolverine (*Gulo gulo*). If we go back to the \[ELC\] SpatVector, there is a column called `WOLVERINE`.

```{r}
#| eval: false
# What values do we see in the wolverine column?
elc$WOLVERINE

# Plot the [ELC] layer according to wolverine landscape suitability values
ggplot() +
  geom_spatvector(data=elc, aes(fill=WOLVERINE))
```

We just want to look at values 4 and 5, which correspond to the two most suitable landscape classes. We can use square brackets to filter, again just like a data frame.

```{r}
#| eval: false
# Filter by WOLVERINE column to greatest suitability values
gulo <- elc[elc$WOLVERINE==4 | elc$WOLVERINE==5,]

# Plot
ggplot() +
  geom_spatvector(data=gulo, aes(fill=factor(WOLVERINE)))
```

Now we calculate area again to see how much of our study area is highly suitable for wolverines.

```{r}
#| eval: false
# How much area is there?
sum(expanse(gulo)) / 1000 / 1000 # convert to km2
```

If we want to see only the area that will be disturbed by the potential trails and campsites, we need to clip the wolverine suitability by the buffer. Then, calculate the area again.

```{r}
#| eval: false
## Let's clip it by the disturbance area
gulo_dist <- crop(gulo, buffunion)
plot(gulo_dist)

# how much area is being disturbed?
sum(expanse(gulo_dist)) / 1000 / 1000 # convert to km2
```

## Part II: Raster Data

In this section, we will use rasters to understand terrain and vegetation classes from the perspective of a moose (*Alces alces*). The packages we need for this section are:

```{r}
#| eval: false
library(terra)
library(ggplot2)
library(tidyterra)
library(ggspatial)
library(ggnewscale)
```

### 1. Importing Data

Again we have 3 layers to import: \[DEM\], \[RIVERS\], and \[ELC\]. Make sure to check and adjust the spatial reference of any layers if needed. Like the `vect()` function we used to read vector data in the last section, we can use `rast()` to read in raster data.

```{r}
#| eval: false
## Read data
# Ecological Land Classification (i.e., ecoregions) 
elc <- vect("efb650_data/elc.shp")
# Digital elevation model 
dem <- rast("efb650_data/dem.tif")
# Rivers
rivers <- vect("efb650_data/rivers.shp")

## Check spatial reference
crs(elc)==crs(dem)
# Reproject [ELC]
elc <- project(elc, crs(rivers))
crs(elc)==crs(rivers)
```

### 2. Plotting Spatial Objects with `ggplot2`

We can again use `tidyterra` to plot the raster and vector data. Additionally, we can use built-in palettes from `tidyterra` to adjust the color of the raster.

```{r}
#| eval: false
# Take a look at the raster by itself
ggplot() +
  geom_spatraster(data=dem) +
  scale_fill_cross_blended_c(palette="cold_humid") # adjust the color scale using tidyterra
# Some other cross blended color palettes are: "arid", "polar", and "warm_humid"
  
# Plot all three layers together
ggplot() +
  geom_spatraster(data=dem) +
  scale_fill_cross_blended_c(palette="cold_humid") + 
  geom_spatvector(data=elc, fill=NA, color="gray40") +
  geom_spatvector(data=rivers, color="blue", linewidth=1)
```

### 3. Raster-based Analysis

We first want to convert the \[ELC\] polygon to a raster grid, using the moose suitability values as the raster values. We use the \[DEM\] raster as a template for cell size in our conversion.

```{r}
#| eval: false
# First, take a look at the ELC layer as viewed by moose
ggplot() +
  geom_spatvector(data=elc, aes(fill=factor(MOOSE)))

# Convert polygon to raster
moose <- rasterize(elc, dem, field="MOOSE")

# quick look
plot(moose)

# Look at the SpatRaster info
moose
dem
```

The legend shows landscape classes, but we only have the class number, which is not particularly informative. We can relabel the moose raster to better reflect suitability.

```{r}
#| eval: false
# Set up raster values and classes
moose_values <- c(1, 3, 4, 5, 6, 7)
moose_class <- c("Poor", "Low", "Fair", "Good", "High", "Water")

# Add class names and numbers to the raster
levels(moose) <- list(data.frame(ID = moose_values,
                                 suitability = moose_class))
```

Now that we have the class labels, we want to specify a color for each level using `terra`'s color table functionality.

```{r}
#| eval: false
# Specify colors by level
coltb <- data.frame(value=moose_values, col=c("#d01c8b", "#f1b6da", "#f7f7f7", "#b8e186", "#4dac26", "#0570b0"))
# add color table
coltab(moose) <- coltb

# Plot, filling raster cells by color
ggplot() +
  geom_spatraster(data=moose) +
  # Note that we have to specify data for the color table again
  scale_fill_coltab(data=moose, na.translate = FALSE, name="Suitability")
```

Now we want to convert the dominant vegetation column from \[ELC\] from polygon to raster the same way we did for `moose`.

```{r}
#| eval: false
# First, create a raster based on dominant vegetation
domveg <- rasterize(elc, dem, field="DOMVEG")

# Plot, and note that because the column in the vector was categorical, we don't have to change the raster from numeric values to categorical
plot(domveg)
```

The moose raster only has 6 different values, but sometimes we want fewer categories for analyses. Take a look at the `DOMVEG` column of \[ELC\]. For example, sometimes a class might only have a few cells. We can use a histogram or the `freq()` function to see how many cells fall into each vegetation type.

```{r}
#| eval: false
# Frequency table
freq(domveg)

# Plot histogram
hist(domveg)
```

Let's combine these 10 classes into just 4: meadow, shrubs, forest, and non-vegetated, since there's a few smaller classes.

```{r}
#| eval: false
# Check the levels of the raster
levels(domveg)

# create vector of new labels
veg_class <- c("Meadow","Shrub","Forest","Forest","Meadow",
               "Nonvegetated","Forest", "Forest","Forest", "Shrub")

# Add class names and numbers to the raster
levels(domveg) <- list(data.frame(ID = 0:9,
                                  domveg = veg_class))

# Plot
plot(domveg)
```

We can perform focal statistics to understand aspects of the rasters. The functionality of focal statistics in `terra` seems a bit limited relative to ArcGIS. There is a `focal()` function, but the functions are more limited.

Similarly, finding line density is much simpler in ArcGIS. However, we can create a distance raster similar to what we generated in ArcGIS without much effort.

```{r}
#| eval: false
# First create a template raster, using the extent of the [RIVERS] shapefile, and a resolution of 30m
temp <- rast(rivers, resolution=30)

# We can't visualize this by plotting...there's nothing in the raster, but we can add the vals argument and then visualize the new raster (this draws a number from a normal distribution for each cell...749700 the lengtt x width of the raster extent)
plot(rivers, resolution=30, vals=rnorm(749700))

# The distance function will calculate the distance from the center of each cell to the closest part of the line 
distance_raster <- distance(temp_rast, rivers)

# Plot
plot(distance_raster)
```

### 4. Surface Analysis

Digital elevation models are often used in analysis. Sometimes it is more useful to visualize as a hillshade, or the shaded relief, or other aspects of the terrain. `terra` requires us to first calculate the slope and aspect of the DEM (in radians), but we can then combine those into a hillshade layer.

```{r}
#| eval: false
# Use terrain function to create new rasters with slope and aspect (in radians!)
# Slope
dem_s <- terrain(dem, v="slope", neighbors=8, unit="radians") 

# Quick plot to visualize
plot(dem_s)

# Aspect
dem_a <- terrain(dem, v="aspect", neighbors=8, unit="radians") 

# Quick plot to visualize
plot(dem_a)
```

Now create the hillshade.

```{r}
#| eval: false
# Use slope and aspect to create hillshade
hill <- shade(slope=dem_s, aspect=dem_a, angle=40, direction=270)
plot(hill)

## Plot
# but first, make a palette
pal_greys <- hcl.colors(1000, "Grays")

ggplot() +
  geom_spatraster(data=hill) +
  scale_fill_gradientn(colors = pal_greys, na.value = NA)
```

The 3rd and 4th arguments we included, `angle` and `direction` are the elevation angle of the light source (i.e., the sun), in degrees, and the direction of the light source, also in degrees. Try changing these values to see how the hillshade changes. Compare these parameters to the ones we saw in ArcGIS Pro. You can save the hillshade directly by adding the `filename` argument.

### 5. Create a Final Map

We can plot the moose suitability on top of the hillshade layer, and add a scale bar and north arrow using the `ggspatial` package.

```{r}
#| eval: false
ggplot() +
  geom_spatraster(data=hill, show.legend=FALSE) +
  scale_fill_gradientn(colors=pal_greys, na.value=NA) +
  new_scale_fill() + # ggnewscale package, separate palettes for hillshade and moose suitability
  geom_spatraster(data=moose, alpha=0.4, na.rm=TRUE) + 
  scale_fill_coltab(data=moose, name="Suitability") +
  theme(legend.position=c(0.05,0.95),
        legend.justification=c(0,1)) +
  annotation_north_arrow(
    which_north = TRUE,
    pad_x = unit(0.01, "npc"),
    pad_y = unit(0.15, "npc"),
    style = north_arrow_minimal()) +
  annotation_scale(
    height = unit(0.02, "npc"),
    width_hint = 0.4,
    pad_x = unit(0.05, "npc"),
    pad_y = unit(0.08, "npc"), 
    text_cex = 1)
```
